[
    {
      "endpoint": {
        "method": "POST",
        "pattern": "/register-response"
      },
      "transformation": {
        "input": "JSON",
        "output": "JSON"
      },
      "requests": {
        "response": [
          {
            "forEach": {},
            "config": {
              "params": {},
              "method": "post",
              "headers": {
                "contentType": "application/fhir+json"
              },
              "url": "http://jempi-api:50000/JeMPI/cr-register"
            },
            "_id": "65362c12ee724b001d38b6d1",
            "id": "jempi"
          }
        ],
        "lookup": []
      },
      "state": {
        "config": {
          "networkErrors": "no-filter",
          "includeStatuses": []
        }
      },
      "_id": "65362bf2ee724b001d38b699",
      "name": "Register Patient response",
      "inputTransforms": {
        "currentDate": "$now()",
        "sourcePatient": "$exists(requestBody.identifier) and $exists(requestBody.identifier[0]) and $exists(requestBody.identifier[0].value) ? {'patient': requestBody.identifier[0].value, 'facility': requestBody.identifier[0].system} : null",
        "phn": "$exists(requestBody.identifier) and $exists(requestBody.identifier[0]) and  $count($filter(requestBody.identifier, function($v) {$contains($v.system, 'phn')})) > 0 ? $filter(requestBody.identifier, function($v) {$contains($v.system, 'phn')})[0].value : null",
        "nic": "$exists(requestBody.identifier) and $exists(requestBody.identifier[0]) and  $count($filter(requestBody.identifier, function($v) {$contains($v.system, 'nic')})) > 0 ? $filter(requestBody.identifier, function($v) {$contains($v.system, 'nic')})[0].value : null",
        "ppn": "$exists(requestBody.identifier) and $exists(requestBody.identifier[0]) and  $count($filter(requestBody.identifier, function($v) {$contains($v.system, 'ppn')})) > 0 ? $filter(requestBody.identifier, function($v) {$contains($v.system, 'ppn')})[0].value : null",
        "scn": "$exists(requestBody.identifier) and $exists(requestBody.identifier[0]) and  $count($filter(requestBody.identifier, function($v) {$contains($v.system, 'scn')})) > 0 ? $filter(requestBody.identifier, function($v) {$contains($v.system, 'scn')})[0].value : null",
        "dl": "$exists(requestBody.identifier) and $exists(requestBody.identifier[0]) and  $count($filter(requestBody.identifier, function($v) {$contains($v.system, 'dl')})) > 0 ? $filter(requestBody.identifier, function($v) {$contains($v.system, 'dl')})[0].value : null",
        "name": "$exists(requestBody.name) and $exists(requestBody.name[0]) ? $split(requestBody.name[0].text, ' ')[0] : null",
        "familyName": "$exists(requestBody.name) and $exists(requestBody.name[0]) ? $split(requestBody.name[0].text, ' ')[1] : null",
        "city": "$exists(requestBody.address) and $exists(requestBody.address[0]) ? requestBody.address[0].city : null",
        "phoneNumber": "$exists(requestBody.telecom) and $exists(requestBody.telecom[0]) ? requestBody.telecom[0].value : null"
      },
      "inputMapping": {
        "constants.candidateThreshold": "candidateThreshold",
        "transforms.sourcePatient": "sourceId",
        "transforms.phn": "demographicData.phn",
        "transforms.nic": "demographicData.nic",
        "transforms.ppn": "demographicData.ppn",
        "transforms.scn": "demographicData.scn",
        "transforms.dl": "demographicData.dl",
        "transforms.familyName": "demographicData.familyName",
        "transforms.name": "demographicData.givenName",
        "requestBody.gender": "demographicData.gender",
        "requestBody.birthDate": "demographicData.dob",
        "transforms.city": "demographicData.city",
        "transforms.phoneNumber": "demographicData.phoneNumberMobile",
        "transforms.currentDate": "uniqueInteractionData.auxDateCreated"
      },
      "constants": {
        "candidateThreshold": 0.9
      },
      "createdAt": "2023-10-23T08:16:50.250Z",
      "updatedAt": "2023-10-23T08:17:22.664Z",
      "__v": 0
    },
    {
      "endpoint": {
        "method": "POST",
        "pattern": "/fhir/Patient"
      },
      "transformation": {
        "input": "JSON",
        "output": "JSON"
      },
      "requests": {
        "lookup": [
          {
            "forEach": {},
            "config": {
              "params": {},
              "method": "post",
              "headers": {
                "contentType": "application/fhir+json"
              },
              "url": "http://openhim-mapping-mediator:3003/register-response"
            },
            "allowedStatuses": [],
            "_id": "65362c12ee724b001d38b6cf",
            "id": "jempi",
            "forwardExistingRequestBody": true
          }
        ],
        "response": [
          {
            "forEach": {},
            "config": {
              "params": {
                "url": {
                  "patientId": {
                    "path": "transforms.id"
                  }
                }
              },
              "method": "put",
              "headers": {
                "contentType": "application/fhir+json"
              },
              "url": "http://hapi-fhir:8080/fhir/Patient/:patientId"
            },
            "_id": "65362c12ee724b001d38b6ce",
            "id": "hapiFhir"
          }
        ]
      },
      "state": {
        "config": {
          "networkErrors": "no-filter",
          "includeStatuses": []
        }
      },
      "_id": "65362bf2ee724b001d38b69c",
      "name": "Register Patient FHIR",
      "constants": {
        "active": true
      },
      "inputTransforms": {
        "id": "lookupRequests.jempi.data.linkInfo.goldenUID"
      },
      "inputMapping": {
        "requestBody.resourceType": "resourceType",
        "transforms.id": "id",
        "requestBody.identifier": "identifier",
        "constants.active": "active",
        "requestBody.name": "name",
        "requestBody.gender": "gender",
        "requestBody.birthDate": "birthDate",
        "requestBody.address": "address",
        "requestBody.telecom": "telecom"
      },
      "createdAt": "2023-10-23T08:16:50.257Z",
      "updatedAt": "2023-10-23T08:17:22.657Z",
      "__v": 0
    },
    {
      "endpoint": {
        "method": "POST",
        "pattern": "/fhir/Patient/:patientId"
      },
      "transformation": {
        "input": "JSON",
        "output": "JSON"
      },
      "requests": {
        "lookup": [
          {
            "forEach": {},
            "config": {
              "params": {
                "url": {
                  "patientId": {
                    "path": "urlParams.patientId"
                  }
                }
              },
              "method": "get",
              "url": "http://jempi-api:50000/JeMPI/expanded-golden-record/:patientId"
            },
            "allowedStatuses": [],
            "_id": "65362bf2ee724b001d38b6a0",
            "id": "jempiSearch"
          }
        ],
        "response": []
      },
      "state": {
        "config": {
          "networkErrors": "no-filter",
          "includeStatuses": []
        }
      },
      "_id": "65362bf2ee724b001d38b69f",
      "name": "Search Patient by id",
      "inputTransforms": {
        "id": "lookupRequests.jempiSearch.data.goldenRecord.uid",
        "gender": "$exists(lookupRequests.jempiSearch.data.goldenRecord.demographicData.gender) ? lookupRequests.jempiSearch.data.goldenRecord.demographicData.gender : null",
        "birthDate": "$exists(lookupRequests.jempiSearch.data.goldenRecord.demographicData.dob) ? lookupRequests.jempiSearch.data.goldenRecord.demographicData.dob : null",
        "name": "$exists(lookupRequests.jempiSearch.data.goldenRecord.demographicData.givenName) ? lookupRequests.jempiSearch.data.goldenRecord.demographicData.givenName : null",
        "lastName": "$exists(lookupRequests.jempiSearch.data.goldenRecord.demographicData.familyName) ? lookupRequests.jempiSearch.data.goldenRecord.demographicData.familyName : null",
        "city": "$exists(lookupRequests.jempiSearch.data.goldenRecord.demographicData.city) ? lookupRequests.jempiSearch.data.goldenRecord.demographicData.city : null",
        "identifierValue": "$exists(lookupRequests.jempiSearch.data.goldenRecord.sourceId) and $exists(lookupRequests.jempiSearch.data.goldenRecord.sourceId.patient) ? lookupRequests.jempiSearch.data.goldenRecord.sourceId.patient : null",
        "identifierSystem": "$exists(lookupRequests.jempiSearch.data.goldenRecord.sourceId) and $exists(lookupRequests.jempiSearch.data.goldenRecord.sourceId.facility) ? lookupRequests.jempiSearch.data.goldenRecord.sourceId.facility : null",
        "nationalId": "$exists(lookupRequests.jempiSearch.data.goldenRecord.demographicData.nationalId) ? {'value': lookupRequests.jempiSearch.data.goldenRecord.demographicData.nationalId, 'system': constants.nidSystem} : null",
        "phoneNumberMobile": "$exists(lookupRequests.jempiSearch.data.goldenRecord.demographicData.phoneNumberMobile) ? {'value': lookupRequests.jempiSearch.data.goldenRecord.demographicData.phoneNumberMobile, 'system': constants.phone} : null"
      },
      "inputMapping": {
        "constants.resourceType": "resourceType",
        "transforms.id": "id",
        "transforms.gender": "gender",
        "transforms.birthDate": "birthDate",
        "transforms.lastName": "name[0].family",
        "transforms.name": "name[0].given[0]",
        "transforms.city": "address[0].city",
        "transforms.identifierSystem": "identifier[0].system",
        "transforms.identifierValue": "identifier[0].value",
        "transforms.nationalId": "identifier[]+",
        "transforms.phoneNumberMobile": "telecom[]+"
      },
      "constants": {
        "nidSystem": "NationalID",
        "resourceType": "Patient",
        "phone": "phone"
      },
      "createdAt": "2023-10-23T08:16:50.262Z",
      "updatedAt": "2023-10-23T08:16:50.262Z",
      "__v": 0
    },
    {
      "endpoint": {
        "method": "POST",
        "pattern": "/fhir/Patients"
      },
      "transformation": {
        "input": "JSON",
        "output": "JSON"
      },
      "requests": {
        "lookup": [
          {
            "forEach": {},
            "config": {
              "params": {},
              "method": "post",
              "headers": {
                "contentType": "application/json"
              },
              "url": "http://openhim-mapping-mediator:3003/search-response"
            },
            "allowedStatuses": [],
            "_id": "65362c12ee724b001d38b6d5",
            "id": "jempiSearchAll",
            "forwardExistingRequestBody": true
          }
        ],
        "response": []
      },
      "state": {
        "config": {
          "networkErrors": "no-filter",
          "includeStatuses": []
        }
      },
      "_id": "65362bf2ee724b001d38b6a2",
      "name": "Search Endpoint",
      "constants": {
        "resourceType": "Bundle",
        "type": "searchset"
      },
      "inputTransforms": {
        "total": "$count(lookupRequests.jempiSearchAll.data.goldenRecords)",
        "entry": "$map(lookupRequests.jempiSearchAll.data.goldenRecords, function($v) {{'fullUrl': 'Patient/' & $v.goldenId, 'resource': {'resourceType': 'Patient','id': $v.goldenId,'name': {'given': [$v.demographicData.givenName],'family': $v.demographicData.familyName},'address': [{'city': $v.demographicData.city}],'birthDate': $v.demographicData.dob,'telecom': [{'value': $v.demographicData.phoneNumber,'system': 'phone'}],'identifier': [{'system': 'https://fhir.health.gov.lk/id/phn','value': $v.demographicData.phn},{'system': 'https://fhir.health.gov.lk/id/nic','value': $v.demographicData.nic},{'system': 'https://fhir.health.gov.lk/id/ppn','value': $v.demographicData.ppn},{'system': 'https://fhir.health.gov.lk/id/scn','value': $v.demographicData.scn},{'system': 'https://fhir.health.gov.lk/id/dl','value': $v.demographicData.dl}],'gender': $v.demographicData.gender}}})"
      },
      "inputMapping": {
        "constants.resourceType": "resourceType",
        "constants.type": "type",
        "transforms.total": "total",
        "transforms.entry": "entry"
      },
      "createdAt": "2023-10-23T08:16:50.268Z",
      "updatedAt": "2023-10-23T08:17:22.667Z",
      "__v": 0
    },
    {
      "endpoint": {
        "method": "POST",
        "pattern": "/search-response"
      },
      "transformation": {
        "input": "JSON",
        "output": "JSON"
      },
      "requests": {
        "response": [
          {
            "forEach": {},
            "config": {
              "params": {},
              "method": "post",
              "url": "http://jempi-api:50000/JeMPI/cr-find"
            },
            "_id": "65362bf2ee724b001d38b6a6",
            "id": "jempiSearchAllResponse"
          }
        ],
        "lookup": []
      },
      "state": {
        "config": {
          "networkErrors": "no-filter",
          "includeStatuses": []
        }
      },
      "_id": "65362bf2ee724b001d38b6a5",
      "name": "Search Response Endpoint deterministic",
      "inputValidation": {
        "type": "object",
        "properties": {
          "requestBody": {
            "type": "object",
            "properties": {
              "parameters": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "name": {
                      "type": "string"
                    },
                    "valueCode": {
                      "type": "string"
                    },
                    "valueString": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "name",
                    "valueCode",
                    "valueString"
                  ]
                },
                "minItems": 1
              }
            },
            "required": [
              "parameters"
            ]
          }
        }
      },
      "inputTransforms": {
        "operands": "$append([], $map(requestBody.parameters, function($v) {{'operator': $v.name, 'operand': {'fn': 'eq', 'name': $v.valueCode, 'value': $v.valueString}}}))"
      },
      "constants": {
        "operator": "or",
        "function": "match",
        "operandFunction": "eq"
      },
      "inputMapping": {
        "transforms.operands": "operands",
        "transforms.operands[0].operand": "operand"
      },
      "createdAt": "2023-10-23T08:16:50.272Z",
      "updatedAt": "2023-10-23T08:16:50.272Z",
      "__v": 0
    },
    {
      "endpoint": {
        "method": "POST",
        "pattern": "/fhir/Patients/match"
      },
      "transformation": {
        "input": "JSON",
        "output": "JSON"
      },
      "requests": {
        "lookup": [
          {
            "forEach": {},
            "config": {
              "params": {
                "query": {
                  "candidateThreshold": {
                    "path": "query.candidateThreshold"
                  }
                }
              },
              "method": "post",
              "headers": {
                "contentType": "application/json"
              },
              "url": "http://openhim-mapping-mediator:3003/search-response-match"
            },
            "allowedStatuses": [],
            "_id": "65362bf2ee724b001d38b6a9",
            "id": "jempiSearchMatch",
            "forwardExistingRequestBody": true
          }
        ],
        "response": []
      },
      "state": {
        "config": {
          "networkErrors": "no-filter",
          "includeStatuses": []
        }
      },
      "_id": "65362bf2ee724b001d38b6a8",
      "name": "Search Endpoint probabilistic",
      "constants": {
        "resourceType": "Bundle",
        "type": "searchset"
      },
      "inputTransforms": {
        "total": "$count(lookupRequests.jempiSearchMatch.data.goldenRecords)",
        "entry": "$map(lookupRequests.jempiSearchMatch.data.goldenRecords, function($v) {{'fullUrl': 'Patient/' & $v.goldenId, 'resource': {'resourceType': 'Patient','id': $v.goldenId,'name': {'given': [$v.demographicData.givenName],'family': $v.demographicData.familyName},'address': [{'city': $v.demographicData.city}],'birthDate': $v.demographicData.dob,'telecom': [{'value': $v.demographicData.phoneNumberMobile,'system': 'phone'}],'identifier': [{'system': $v.sourceId.facility,'value': $v.sourceId.patient},{'system': 'NationalID','value': $v.demographicData.nationalId}],'gender': $v.demographicData.gender}}})"
      },
      "inputMapping": {
        "constants.resourceType": "resourceType",
        "constants.type": "type",
        "transforms.total": "total",
        "transforms.entry": "entry"
      },
      "createdAt": "2023-10-23T08:16:50.276Z",
      "updatedAt": "2023-10-23T08:16:50.276Z",
      "__v": 0
    },
    {
      "endpoint": {
        "method": "POST",
        "pattern": "/search-response-match"
      },
      "transformation": {
        "input": "JSON",
        "output": "JSON"
      },
      "requests": {
        "response": [
          {
            "forEach": {},
            "config": {
              "params": {},
              "method": "post",
              "headers": {
                "contentType": "application/fhir+json"
              },
              "url": "http://jempi-api:50000/JeMPI/cr-candidates"
            },
            "_id": "65362bf2ee724b001d38b6ac",
            "id": "jempiSearchMatchResponse"
          }
        ],
        "lookup": []
      },
      "state": {
        "config": {
          "networkErrors": "no-filter",
          "includeStatuses": []
        }
      },
      "_id": "65362bf2ee724b001d38b6ab",
      "name": "Search Patients response probabilistic",
      "inputTransforms": {
        "candidateThreshold": "$exists(query.candidateThreshold) ? query.candidateThreshold : constants.candidateThreshold",
        "nationalId": "$exists(requestBody.identifier) and $exists(requestBody.identifier[0]) and $count($filter(requestBody.identifier, function($v) {$contains($v.system, 'NationalID')})) > 0 ? $filter(requestBody.identifier, function($v) {$contains($v.system, 'NationalID')})[0].value : null",
        "name": "$exists(requestBody.name) and $exists(requestBody.name[0]) and $exists(requestBody.name[0].given[0]) ? requestBody.name[0].given[0] : null",
        "familyName": "$exists(requestBody.name) and $exists(requestBody.name[0]) ? requestBody.name[0].family : null",
        "city": "$exists(requestBody.address) and $exists(requestBody.address[0]) ? requestBody.address[0].city : null",
        "phoneNumberMobile": "$exists(requestBody.telecom) and $exists(requestBody.telecom[0]) ? requestBody.telecom[0].value : null"
      },
      "inputMapping": {
        "transforms.candidateThreshold": "candidateThreshold",
        "transforms.nationalId": "demographicData.nationalId",
        "transforms.familyName": "demographicData.familyName",
        "transforms.name": "demographicData.givenName",
        "requestBody.gender": "demographicData.gender",
        "requestBody.birthDate": "demographicData.dob",
        "transforms.city": "demographicData.city",
        "transforms.phoneNumberMobile": "demographicData.phoneNumberMobile"
      },
      "constants": {
        "candidateThreshold": 0.9
      },
      "createdAt": "2023-10-23T08:16:50.282Z",
      "updatedAt": "2023-10-23T08:16:50.282Z",
      "__v": 0
    },
    {
      "endpoint": {
        "method": "POST",
        "pattern": "/update-patient-response/:patientId"
      },
      "transformation": {
        "input": "JSON",
        "output": "JSON"
      },
      "requests": {
        "response": [
          {
            "forEach": {},
            "config": {
              "params": {},
              "method": "patch",
              "headers": {
                "contentType": "application/json"
              },
              "url": "http://jempi-api:50000/JeMPI/cr-update-fields"
            },
            "_id": "65362bf2ee724b001d38b6af",
            "id": "jempiUpdateResponse"
          }
        ],
        "lookup": []
      },
      "state": {
        "config": {
          "networkErrors": "no-filter",
          "includeStatuses": []
        }
      },
      "_id": "65362bf2ee724b001d38b6ae",
      "name": "Update Patient Response",
      "inputTransforms": {
        "familyName": "$exists(requestBody.name) and $exists(requestBody.name[0]) and $exists(requestBody.name[0].family) ? {'name': 'familyName', 'value': requestBody.name[0].family} : null",
        "givenName": "$exists(requestBody.name) and $exists(requestBody.name[0]) and $exists(requestBody.name[0].given) and $exists(requestBody.name[0].given[0]) ? {'name': 'givenName', 'value': requestBody.name[0].given[0]} : null",
        "birthDate": "$exists(requestBody.birthDate) ? {'name': 'dob', 'value': requestBody.birthDate} : null",
        "gender": "$exists(requestBody.gender) ? {'name': 'gender', 'value': requestBody.gender} : null",
        "city": "$exists(requestBody.address) and $exists(requestBody.address[0]) and $exists(requestBody.address[0].city) ? {'name': 'city', 'value': requestBody.address[0].city} : null",
        "phoneNumberMobile": "$exists(requestBody.telecom) and $exists(requestBody.telecom[0]) and $exists(requestBody.telecom[0].value) ? {'name': 'phoneNumberMobile', 'value': requestBody.telecom[0].value} : null",
        "nationalId": "$exists(requestBody.identifier) and $exists(requestBody.identifier[0]) and $count($filter(requestBody.identifier, function($v) {$contains($v.system, 'NationalID')})) > 0 ? {'name': 'nationalId', 'value': $filter(requestBody.identifier, function($v) {$contains($v.system, 'NationalID')})[0].value} : null"
      },
      "inputMapping": {
        "urlParams.patientId": "goldenId",
        "transforms.familyName": "fields[]+",
        "transforms.givenName": "fields[]+",
        "transforms.birthDate": "fields[]+",
        "transforms.gender": "fields[]+",
        "transforms.city": "fields[]+",
        "transforms.phoneNumberMobile": "fields[]+",
        "transforms.nationalId": "fields[]+"
      },
      "createdAt": "2023-10-23T08:16:50.286Z",
      "updatedAt": "2023-10-23T08:16:50.286Z",
      "__v": 0
    },
    {
      "endpoint": {
        "method": "PUT",
        "pattern": "/fhir/update/Patient/:patientId"
      },
      "transformation": {
        "input": "JSON",
        "output": "JSON"
      },
      "requests": {
        "lookup": [
          {
            "forEach": {},
            "config": {
              "params": {
                "url": {
                  "patientId": {
                    "path": "urlParams.patientId"
                  }
                }
              },
              "method": "post",
              "headers": {
                "contentType": "application/json"
              },
              "url": "http://openhim-mapping-mediator:3003/update-patient-response/:patientId"
            },
            "allowedStatuses": [],
            "_id": "65362bf2ee724b001d38b6b2",
            "id": "jempiUpdate",
            "forwardExistingRequestBody": true
          }
        ],
        "response": []
      },
      "state": {
        "config": {
          "networkErrors": "no-filter",
          "includeStatuses": []
        }
      },
      "_id": "65362bf2ee724b001d38b6b1",
      "name": "Update Patient",
      "inputMapping": {
        "urlParams.patientId": "id",
        "requestBody.resourceType": "resourceType",
        "requestBody.identifier": "identifier",
        "requestBody.name": "name",
        "requestBody.gender": "gender",
        "requestBody.birthDate": "birthDate",
        "requestBody.address": "address",
        "requestBody.telecom": "telecom"
      },
      "createdAt": "2023-10-23T08:16:50.292Z",
      "updatedAt": "2023-10-23T08:16:50.292Z",
      "__v": 0
    },
    {
      "endpoint": {
        "method": "POST",
        "pattern": "/fhir/everything"
      },
      "transformation": {
        "input": "JSON",
        "output": "JSON"
      },
      "requests": {
        "lookup": [
          {
            "forEach": {},
            "config": {
              "params": {},
              "method": "post",
              "headers": {
                "contentType": "application/fhir+json"
              },
              "url": "http://openhim-mapping-mediator:3003/search-response"
            },
            "allowedStatuses": [],
            "_id": "65362c12ee724b001d38b6cb",
            "id": "jempiSearchAll",
            "forwardExistingRequestBody": true
          }
        ],
        "response": [
          {
            "forEach": {},
            "config": {
              "params": {
                "url": {
                  "patientId": {
                    "path": "transforms.entry"
                  }
                }
              },
              "method": "get",
              "headers": {
                "contentType": "application/fhir+json"
              },
              "url": "http://hapi-fhir:8080/fhir/Patient/:patientId"
            },
            "_id": "65362c12ee724b001d38b6cc",
            "id": "hapiFhir"
          }
        ]
      },
      "state": {
        "config": {
          "networkErrors": "no-filter",
          "includeStatuses": []
        }
      },
      "_id": "65362c12ee724b001d38b6ca",
      "name": "Search All FHIR",
      "constants": {
        "active": true
      },
      "inputTransforms": {
        "entry": "$map(lookupRequests.jempiSearchAll.data.goldenRecords, function($v) {$v.goldenId &'/$everything'})"
      },
      "inputMapping": {},
      "createdAt": "2023-10-23T08:17:22.675Z",
      "updatedAt": "2023-10-23T08:17:22.675Z",
      "__v": 0
    }
  ]